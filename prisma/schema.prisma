// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin{
  id String @id
  username String @unique
}
model Student{
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  bloodType String?
  gender UserGender
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
  parent Parent @relation(fields: [parentId], references: [id])
  parentId String
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  // lessons Lesson[]
  results Result[]
  attendances Attendance[]
}
model Parent{
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  students Student[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}

model Teacher{
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String @unique
  address String
  img String?
  bloodType String?
  gender UserGender
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
  messages Message[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Subject{
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Class{
  id Int @id @default(autoincrement())
  name String
  capacity Int
  lessons Lesson[]
  supervisorId String
  supervisor Teacher @relation(fields: [supervisorId], references: [id])
  student Student[]
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  announcements Announcement[]
  events Event[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Lesson{
  id Int @id @default(autoincrement())
  name String
  day Day
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  // student Student[]
  exams Exam[]
  assignment Assignment[]
  attendances Attendance[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}

model Grade{
  id Int @id @default(autoincrement())
  level Int
  students Student[]
  classes Class[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt

}
model Exam{
  id Int @id @default(autoincrement())
  title String
  startTime DateTime
  endTime DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Assignment{
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  endDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Result{
  id Int @id @default(autoincrement())
  score Int
  examId Int?
  exam Exam? @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Attendance{
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Event{
  id Int @id @default(autoincrement())
  title String
  description String
  startTime DateTime
  endTime DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Message{
  id Int @id @default(autoincrement())
  content String
  senderId String
  sender Teacher @relation(fields: [senderId], references: [id])
    createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}
model Announcement{
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
    createdAt DateTime @default(now())
  lastUpdated DateTime @updatedAt
}

enum UserGender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}