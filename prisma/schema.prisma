generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  classId     Int
  gradeId     Int
  birthday    DateTime
  lastUpdated DateTime     @updatedAt
  attendances Attendance[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent       @relation(fields: [parentId], references: [id])
}

model Teacher {
  id          String    @id
  username    String    @unique
  name        String
  surname     String
  email       String?   @unique
  phone       String?   @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime  @default(now())
  birthday    DateTime
  lastUpdated DateTime  @updatedAt
  classes     Class[]
  lessons     Lesson[]
  subjects    Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id          String    @id
  username    String    @unique
  name        String
  surname     String
  email       String?   @unique
  phone       String    @unique
  address     String
  createdAt   DateTime  @default(now())
  lastUpdated DateTime  @updatedAt
  students    Student[]
}

model Grade {
  id          Int       @id @default(autoincrement())
  level       Int       @unique
  createdAt   DateTime  @default(now())
  lastUpdated DateTime  @updatedAt
  classess    Class[]
  students    Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  createdAt     DateTime       @default(now())
  lastUpdated   DateTime       @updatedAt
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]
}

model Subject {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  lastUpdated DateTime  @updatedAt
  lessons     Lesson[]
  teachers    Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  createdAt   DateTime     @default(now())
  lastUpdated DateTime     @updatedAt
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id          Int      @id @default(autoincrement())
  title       String
  startTime   DateTime
  endTime     DateTime
  lessonId    Int
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  results     Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id          Int      @id @default(autoincrement())
  date        DateTime
  present     Boolean
  studentId   String
  lessonId    Int
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt
  class       Class?   @relation(fields: [classId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  senderId    String
  receiverId  String
  sendType    String
  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt
}

model Resource {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  fileUrl     String
  fileType    String   // e.g., 'pdf', 'video', 'csv', 'docx'
  fileSize    Int?     // Size in bytes
  ownerId     String   // ID of the teacher/admin who uploaded
  owner       String    // 'teacher' or 'admin'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublic    Boolean  @default(true) // Controls visibility to students
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
